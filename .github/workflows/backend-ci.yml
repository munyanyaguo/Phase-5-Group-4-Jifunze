name: Backend CI

on:
  pull_request:
    branches: [ develop, main ]
    paths: [ 'server/**' ]
  push:
    branches: [ develop, main ]
    paths: [ 'server/**' ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_jifunze_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: server

    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pipenv
        run: pip install pipenv 

      - name: Cache pipenv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pipenv
          key: ${{ runner.os }}-pipenv-${{ hashFiles('server/Pipfile', 'server/Pipfile.lock') }}

      - name: Install dependencies with pipenv
        run: |
          pipenv install --dev --deploy

      - name: Lint with flake8
        run: |
          pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        env:
          SECRET_KEY: test-secret-key
          JWT_SECRET_KEY: test-jwt-secret-key
          FLASK_ENV: testing
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_jifunze_db
        run: |
          pipenv run pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./server/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Coverage summary
        if: always()
        run: |
          echo "ðŸ“Š Coverage Report Generated"
          if [ -f coverage.xml ]; then
            echo "âœ… Coverage file created successfully"
          fi